import {
  DndContext,
  DragEndEvent,
  KeyboardSensor,
  PointerSensor,
  closestCenter,
  useSensor,
  useSensors,
} from '@dnd-kit/core';
import {
  SortableContext,
  sortableKeyboardCoordinates,
  verticalListSortingStrategy,
} from '@dnd-kit/sortable';
import styled from '@emotion/styled';
import { A } from '@mobily/ts-belt';
import { useCallback } from 'react';
import { useFieldArray, useForm } from 'react-hook-form';
import { useUpdateNodeInternals } from 'reactflow';
import invariant from 'tiny-invariant';

import { ConnectorID } from 'flow-models';

import { useFlowStore } from 'state-flow/context/FlowStoreContext';

import NodeVariableEditableItem, {
  HandlePosition,
} from './NodeVariableEditableItem';
import { VariableConfig, VariableFormValue } from './types';

type Props = {
  // Won't change within current session
  isListSortable?: boolean;
  showConnectorHandle?: HandlePosition;
  // Won't change for the current node
  nodeId: string;
  // Might change
  isNodeReadOnly: boolean;
  variableConfigs: VariableConfig[];
};

function NodeVariablesEditableList(props: Props) {
  const updateNodeInternals = useUpdateNodeInternals();

  const updateVariable = useFlowStore((s) => s.updateVariable);
  const removeVariable = useFlowStore((s) => s.removeVariable);

  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    }),
  );

  const { control, handleSubmit } = useForm<VariableFormValue>({
    values: {
      list: props.variableConfigs,
    },
  });

  // NOTE: field will contain all properties of the variable except
  // the "id" is generated by react-hook-form.
  // But in SubmitHandler, the "id" will be the id from the original
  // variable object.
  const { fields, remove, move } = useFieldArray({
    control,
    name: 'list',
  });

  const updateVariables = useCallback(() => {
    handleSubmit((data) => {
      // NOTE: We don't handle add variable here

      if (props.variableConfigs.length === data.list.length) {
        // This is an update

        // NOTE: Elements from the first array, not existing in the
        // second array.
        const updatedVariables = A.difference(data.list, props.variableConfigs);

        for (const changedVariable of updatedVariables) {
          invariant(
            !changedVariable.isReadOnly,
            'Variable should not be readonly',
          );
          updateVariable(changedVariable.id as ConnectorID, {
            name: changedVariable.name,
          });
        }
      } else {
        // This is a remove

        // NOTE: Elements from the first array, not existing in the
        // second array. Note the order of the arguments is different from
        // above.
        const removedVariables = A.difference(props.variableConfigs, data.list);

        for (const removedVariable of removedVariables) {
          invariant(
            !removedVariable.isReadOnly,
            'Variable should not be readonly',
          );
          removeVariable(removedVariable.id as ConnectorID);
        }

        // NOTE: Removing a variable will affect edge and handle positions.
        updateNodeInternals(props.nodeId);
      }
    })();
  }, [
    props.nodeId,
    props.variableConfigs,
    handleSubmit,
    updateVariable,
    updateNodeInternals,
    removeVariable,
  ]);

  const onDragEnd = useCallback(
    (event: DragEndEvent) => {
      const { active, over } = event;

      if (over == null || active.id === over.id) {
        return;
      }

      const oldIndex = fields.findIndex((f) => f.id === active.id);
      const newIndex = fields.findIndex((f) => f.id === over.id);

      move(oldIndex, newIndex);

      handleSubmit((data) => {
        updateVariable(data.list[oldIndex].id as ConnectorID, {
          // Which index to use for which variable is not important here
          // since data will contain variables in updated order.
          index: oldIndex,
        });
        updateVariable(data.list[newIndex].id as ConnectorID, {
          index: newIndex,
        });

        // NOTE: Removing a variable will affect edge and handle positions.
        updateNodeInternals(props.nodeId);
      })();
    },
    [
      props.nodeId,
      fields,
      move,
      handleSubmit,
      updateVariable,
      updateNodeInternals,
    ],
  );

  let editableItemStart = props.variableConfigs.findIndex((c) => !c.isReadOnly);
  if (editableItemStart === -1) {
    editableItemStart = props.variableConfigs.length;
  }

  return (
    <Container>
      <div>
        {fields.slice(0, editableItemStart).map((field, index) => {
          // TODO: Find a way to avoid duplicating the mapper
          return (
            <NodeVariableEditableItem
              key={field.id}
              showConnectorHandle={props.showConnectorHandle ?? 'none'}
              isListSortable={false}
              isNodeReadOnly={props.isNodeReadOnly}
              variable={props.variableConfigs[index]}
              control={control}
              formField={field}
              index={index}
              onRemove={() => {
                remove(index);
              }}
              onUpdateTrigger={updateVariables}
            />
          );
        })}
      </div>
      <DndContext
        sensors={sensors}
        collisionDetection={closestCenter}
        onDragEnd={onDragEnd}
      >
        <SortableContext
          disabled={!props.isListSortable}
          items={fields}
          strategy={verticalListSortingStrategy}
        >
          <div>
            {fields.slice(editableItemStart).map((field, index) => {
              index += editableItemStart;
              const variable = props.variableConfigs[index];

              // NOTE: This is a workaround for the case when the variable is
              // removed
              // TODO: Find a better way to handle this
              if (variable == null) {
                return null;
              }

              return (
                <NodeVariableEditableItem
                  key={field.id}
                  isListSortable={!!props.isListSortable}
                  showConnectorHandle={props.showConnectorHandle ?? 'none'}
                  isNodeReadOnly={props.isNodeReadOnly}
                  variable={variable}
                  control={control}
                  formField={field}
                  index={index}
                  onRemove={() => {
                    remove(index);
                  }}
                  onUpdateTrigger={updateVariables}
                />
              );
            })}
          </div>
        </SortableContext>
      </DndContext>
    </Container>
  );
}

const Container = styled.div`
  position: relative;
  margin-bottom: 10px;
`;

export default NodeVariablesEditableList;
