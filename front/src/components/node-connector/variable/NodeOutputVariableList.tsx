import { A } from '@mobily/ts-belt';
import { useCallback, useMemo } from 'react';
import { useFieldArray, useForm } from 'react-hook-form';
import invariant from 'tiny-invariant';

import { NodeOutputVariable } from 'flow-models';

import { useFlowStore } from 'state-flow/flow-store';

import {
  NodeOutputVariableProps,
  NodeOutputVariablePropsArrayFieldValues,
} from '../types';
import NodeOutputVariableItem from './NodeOutputVariableItem';

type Props = {
  nodeId: string;
  isNodeReadOnly: boolean;
  variables: NodeOutputVariable[];
};

function NodeOutputVariableList(props: Props) {
  const connectorResults = useFlowStore((s) =>
    s.getDefaultVariableValueLookUpDict(),
  );

  const updateVariable = useFlowStore((s) => s.updateConnector);

  const variablePropsArray = useMemo(() => {
    return props.variables.map<NodeOutputVariableProps>((variable) => {
      return {
        id: variable.id,
        name: variable.name,
        value: connectorResults[variable.id],
        isGlobal: variable.isGlobal,
        globalVariableId: variable.globalVariableId,
      };
    });
  }, [props.variables, connectorResults]);

  const { control, handleSubmit } =
    useForm<NodeOutputVariablePropsArrayFieldValues>({
      values: { list: variablePropsArray },
    });

  // NOTE: field will contain all properties of a item, except that the "id" is
  // generated by react-hook-form.
  // But in SubmitHandler, the "id" will be the id from the original
  // variable object.
  const { fields } = useFieldArray({
    control,
    name: 'list',
  });

  const update = useCallback(() => {
    handleSubmit((data) => {
      // NOTE: Elements from the first array, not existing in the
      // second array.
      const updatedVariables = A.difference(data.list, variablePropsArray);

      for (const changedVariable of updatedVariables) {
        invariant(!props.isNodeReadOnly, 'Node should not be readonly');

        updateVariable(changedVariable.id, {
          isGlobal: changedVariable.isGlobal,
          globalVariableId: changedVariable.globalVariableId,
        });
      }
    })();
  }, [props.isNodeReadOnly, variablePropsArray, handleSubmit, updateVariable]);

  return fields.map((field, index) => (
    <NodeOutputVariableItem
      key={field.id}
      nodeId={props.nodeId}
      isNodeReadOnly={props.isNodeReadOnly}
      variableId={props.variables[index].id}
      control={control}
      formField={field}
      index={index}
      onUpdateTrigger={update}
    />
  ));
}

export default NodeOutputVariableList;
