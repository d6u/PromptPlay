import { NodeOutputVariable } from 'flow-models';
import { useCallback, useMemo } from 'react';
import { useFieldArray, useForm } from 'react-hook-form';
import { useFlowStore } from 'state-flow/flow-store';
import {
  NodeOutputVariableProps,
  NodeOutputVariablePropsArrayFieldValues,
} from '../types';
import NodeOutputVariableItem from './NodeOutputVariableItem';

type Props = {
  nodeId: string;
  isNodeReadOnly: boolean;
  variables: NodeOutputVariable[];
};

function NodeOutputVariableList(props: Props) {
  const connectorResults = useFlowStore((s) =>
    s.getDefaultVariableValueLookUpDict(),
  );

  const variablePropsArray = useMemo(() => {
    return props.variables.map<NodeOutputVariableProps>((variable) => {
      return {
        id: variable.id,
        name: variable.name,
        isGlobal: variable.isGlobal,
        value: connectorResults[variable.id],
      };
    });
  }, [props.variables, connectorResults]);

  const { control, handleSubmit } =
    useForm<NodeOutputVariablePropsArrayFieldValues>({
      values: { list: variablePropsArray },
    });

  // NOTE: field will contain all properties of a item, except that the "id" is
  // generated by react-hook-form.
  // But in SubmitHandler, the "id" will be the id from the original
  // variable object.
  const { fields } = useFieldArray({
    control,
    name: 'list',
  });

  const update = useCallback(() => {
    handleSubmit((data) => {
      console.log('NodeOutputVariableList update', data);
    })();
  }, [handleSubmit]);

  return fields.map((field, index) => (
    <NodeOutputVariableItem
      key={field.id}
      nodeId={props.nodeId}
      variableId={props.variables[index].id}
      control={control}
      formField={field}
      index={index}
      onUpdateTrigger={update}
    />
  ));
}

export default NodeOutputVariableList;
