generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// LoginSession is used for mapping session ID stored in browser cookies
// to idToken obtained from idp. It doesn't directly link to a specific user.
model LoginSession {
  id           String   @id @default(uuid()) @db.Uuid
  auth0IdToken String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum UserType {
  RegisteredUser
  PlaceholderUser
}

model User {
  id       String   @id @default(uuid()) @db.Uuid
  userType UserType

  // Registered user only
  email             String?
  name              String?
  profilePictureUrl String?
  auth0UserId       String? @unique

  // Placeholder user only
  placeholderClientToken String? @unique @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  flows            Flow[]
  batchTestPresets BatchTestPreset[]
}

enum CanvasDataSchemaVersion {
  v3
}

model Flow {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  canvasDataSchemaVersion CanvasDataSchemaVersion
  canvasDataV3            Json

  User   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  batchTestPresets BatchTestPreset[]
}

enum BatchTestPresetConfigDataSchemaVersion {
  v1
}

model BatchTestPreset {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  csv       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  configDataSchemaVersion BatchTestPresetConfigDataSchemaVersion
  configDataV1            Json

  User   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid
  Flow   Flow   @relation(fields: [flowId], references: [id])
  flowId String @db.Uuid
}
